import * as Sequelize from 'sequelize';
import * as DataTypes from 'sequelize/lib/data-types';

import * as sequelize from '../../data/sequelize';
import { isExcluded, isIncluded } from '../../data/util';
import * as Schema from './schema';

export function buildArraySchema(model: sequelize.ModelClass): Schema.Schema
{
  const schema: Schema.Schema =
  {
    type: 'array',
    title: model.name[0].toUpperCase() + model.name.substring(1) + '[]',
    items: { $ref: `#/components/schemas/${model.name}` }
  };

  return schema;
}

export function buildObjectSchema(model: sequelize.ModelClass): Schema.Schema
{
  const schema: Schema.Schema =
  {
    type: 'object',
    title: model.name[0].toUpperCase() + model.name.substring(1),
    properties: buildProperties(model)
  };

  return schema;
}

function buildProperties(model: sequelize.ModelClass): { [key: string]: (Schema.Schema | Schema.Reference) }
{
  const properties: { [key: string]: (Schema.Schema | Schema.Reference) } = {};

  for (const attributeKey of Object.keys(model.rawAttributes))
  {
    if (isExcluded(model.options.defaultScope, attributeKey))
    {
      continue;
    }

    const attribute = model.rawAttributes[attributeKey];
    const property: any = {};

    property.readOnly = attribute.primaryKey || attribute['_autoGenerated'];
    property.required = attribute.allowNull === false;

    if (model.options.scopes)
    {
      if (isExcluded(model.options.scopes.publicRead as Sequelize.FindOptions, attributeKey))
      {
        continue;
      }

      if (isExcluded(model.options.scopes.publicWrite as Sequelize.FindOptions, attributeKey))
      {
        property.readOnly = true;
      }

      if (isIncluded(model.options.scopes.publicAllowNull as Sequelize.FindOptions, attributeKey))
      {
        property.required = false;
      }
    }

    if (attributeKey === 'password')
    {
      property.type = 'string';
      property.format = 'password';
    }
    else if (attribute.type instanceof DataTypes.BOOLEAN)
    {
      property.type = 'boolean';
    }
    else if (attribute.type instanceof DataTypes.DATE)
    {
      property.type = 'string';
      property.format = 'date-time';
    }
    else if (attribute.type instanceof DataTypes.DATEONLY)
    {
      property.type = 'string';
      property.format = 'date';
    }
    else if (attribute.type instanceof DataTypes.INTEGER)
    {
      property.type = 'integer';
    }
    else if (attribute.type instanceof DataTypes.STRING ||
      attribute.type instanceof DataTypes.UUID)
    {
      property.type = 'string';
    }

    properties[attributeKey] = property;
  }

  return properties;
}
